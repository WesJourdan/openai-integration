import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';

// TODO: Implement regular yote style reducers https://redux-toolkit.js.org/usage/usage-guide

import apiUtils from '../../global/utils/api';

// const initialState = {
//   loggedInUser: null,
//   status: 'idle',
//   error: null,
// }

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const sendLogin = createAsyncThunk(
  'auth/sendLogin',
  async (username, password) => {
    const response = await apiUtils.callAPI('/api/users/login', 'POST', { username, password });
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const sendLogout = createAsyncThunk(
  'auth/sendLogout',
  async () => {
    const response = await apiUtils.callAPI('/api/users/logout', 'POST');
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const authService = createSlice({
  name: 'auth',
  initialState: {
    loggedInUser: null,
    status: 'idle',
    error: null,
  },
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // none needed here
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(sendLogin.pending, (state) => {
        state.status = 'loading';
        state.error = null
      })
      .addCase(sendLogin.fulfilled, (state, action) => {
        state.status = 'idle';
        state.loggedInUser = action.user;
      })
      // not sure this will work but worth exploring
      .addCase(sendLogin.rejected, (state, action) => {
        state.status = 'error'
        state.error = action.error
      })
      .addCase(sendLogout.pending, (state) => {
        state.status = 'loading';
        state.error = null
      })
      .addCase(sendLogout.fulfilled, (state) => {
        state.status = 'idle';
        state.loggedInUser = null
      })
      // not sure this will work but worth exploring
      .addCase(sendLogout.rejected, (state, action) => {
        state.status = 'error'
        state.error = action.error
      });
  },
});




// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
/**
 * 
 * @returns logged in user object
 */
export const getLoggedInUser = (state) => state.loggedInUser;

// // We can also write thunks by hand, which may contain both sync and async logic.
// // Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };
export default authService.reducer;

